FULL CREDIT
===========

QUESTION 1: Why is String[] args changed to a LinkedList in WordSearch.main? (Hint: Examine the WordSearch constructor!)

	It allows the use of helpful mehtods such as remove() which takes out -v from the args list after setting verbose to true, keeping only the arguments relevant for further processing after this part in the code. Ensures each argument is handled only once.


QUESTION 2: How many puzzles did your machine need to solve with 1 thread to run for between 30 and 45 seconds: 

	700


QUESTION 3: Provide the output of 

    time java WordSearch n 1000 ../puzzle??.txt 

where n is 1 to 16 and 1000 is the number of puzzles specified in Question 2. NOTE: You can run all of these with a single bash command if you like (again, replace 1000 with your number of puzzles from Question 2):

for i in {1..16} ; do time java WordSearch $i 1000 ../puzzle??.txt ; done

Example Timing:

 for i in {1..16} ; do time java WordSearch $i 1000 ../puzzle??.txt ; done
1000 puzzles
Thread 0: 0-999

real	0m31.872s
user	0m32.475s
sys	0m0.224s

1000 puzzles
Thread 1: 500-999
Thread 0: 0-499

real	0m14.376s
user	0m29.078s
sys	0m0.229s

...and so on



YOUR Timing:

700 puzzles with 1 threads
Thread 0: 0-699

real	0m45.273s
user	0m46.346s
sys	0m0.772s

700 puzzles with 2 threads
Thread 1: 350-699
Thread 0: 0-349

real	0m20.817s
user	0m40.879s
sys	0m0.953s

700 puzzles with 3 threads
Thread 0: 0-233
Thread 2: 467-699
Thread 1: 234-466

real	0m17.182s
user	0m45.348s
sys	0m0.997s

700 puzzles with 4 threads
Thread 3: 525-699
Thread 2: 350-524
Thread 1: 175-349
Thread 0: 0-174

real	0m23.524s
user	0m51.423s
sys	0m1.663s

700 puzzles with 5 threads
Thread 0: 0-139
Thread 3: 420-559
Thread 4: 560-699
Thread 1: 140-279
Thread 2: 280-419

real	0m29.009s
user	0m51.419s
sys	0m2.356s

700 puzzles with 6 threads
Thread 1: 117-233
Thread 2: 234-350
Thread 0: 0-116
Thread 4: 468-583
Thread 5: 584-699
Thread 3: 351-467

real	0m24.016s
user	0m50.189s
sys	0m1.982s

700 puzzles with 7 threads
Thread 5: 500-599
Thread 1: 100-199
Thread 0: 0-99
Thread 4: 400-499
Thread 3: 300-399
Thread 2: 200-299
Thread 6: 600-699

real	0m20.582s
user	0m51.434s
sys	0m1.645s

700 puzzles with 8 threads
Thread 2: 176-263
Thread 5: 439-525
Thread 3: 264-351
Thread 0: 0-87
Thread 1: 88-175
Thread 4: 352-438
Thread 7: 613-699
Thread 6: 526-612

real	0m23.138s
user	0m50.804s
sys	0m1.844s

700 puzzles with 9 threads
Thread 8: 623-699
Thread 1: 78-155
Thread 4: 312-389
Thread 5: 390-467
Thread 0: 0-77
Thread 3: 234-311
Thread 6: 468-545
Thread 2: 156-233
Thread 7: 546-622

real	0m22.997s
user	0m54.745s
sys	0m1.163s

700 puzzles with 10 threads
Thread 8: 560-629
Thread 2: 140-209
Thread 1: 70-139
Thread 9: 630-699
Thread 5: 350-419
Thread 6: 420-489
Thread 3: 210-279
Thread 4: 280-349
Thread 7: 490-559
Thread 0: 0-69

real	0m19.898s
user	0m52.012s
sys	0m1.078s

700 puzzles with 11 threads
Thread 8: 511-573
Thread 3: 192-255
Thread 1: 64-127
Thread 6: 384-447
Thread 5: 320-383
Thread 2: 128-191
Thread 4: 256-319
Thread 0: 0-63
Thread 7: 448-510
Thread 10: 637-699
Thread 9: 574-636

real	0m21.090s
user	0m53.649s
sys	0m1.159s

700 puzzles with 12 threads
Thread 8: 468-525
Thread 5: 294-351
Thread 11: 642-699
Thread 1: 59-117
Thread 4: 236-293
Thread 2: 118-176
Thread 10: 584-641
Thread 7: 410-467
Thread 9: 526-583
Thread 6: 352-409
Thread 3: 177-235
Thread 0: 0-58

real	0m29.129s
user	1m0.678s
sys	0m2.183s

700 puzzles with 13 threads
Thread 1: 54-107
Thread 6: 324-377
Thread 5: 270-323
Thread 4: 216-269
Thread 12: 647-699
Thread 9: 486-539
Thread 0: 0-53
Thread 10: 540-593
Thread 11: 594-646
Thread 3: 162-215
Thread 7: 378-431
Thread 2: 108-161
Thread 8: 432-485

real	0m25.931s
user	0m52.686s
sys	0m2.735s

700 puzzles with 14 threads
Thread 10: 500-549
Thread 12: 600-649
Thread 11: 550-599
Thread 1: 50-99
Thread 3: 150-199
Thread 8: 400-449
Thread 9: 450-499
Thread 6: 300-349
Thread 2: 100-149
Thread 5: 250-299
Thread 13: 650-699
Thread 7: 350-399
Thread 0: 0-49
Thread 4: 200-249

real	0m21.670s
user	0m54.775s
sys	0m1.555s

700 puzzles with 15 threads
Thread 8: 376-422
Thread 10: 470-515
Thread 4: 188-234
Thread 0: 0-46
Thread 5: 235-281
Thread 7: 329-375
Thread 9: 423-469
Thread 13: 608-653
Thread 14: 654-699
Thread 12: 562-607
Thread 6: 282-328
Thread 3: 141-187
Thread 11: 516-561
Thread 2: 94-140
Thread 1: 47-93

real	0m22.509s
user	0m54.062s
sys	0m1.577s

700 puzzles with 16 threads
Thread 13: 571-613
Thread 4: 176-219
Thread 12: 528-570
Thread 15: 657-699
Thread 2: 88-131
Thread 14: 614-656
Thread 0: 0-43
Thread 6: 264-307
Thread 5: 220-263
Thread 8: 352-395
Thread 7: 308-351
Thread 9: 396-439
Thread 10: 440-483
Thread 11: 484-527
Thread 1: 44-87
Thread 3: 132-175

real	0m22.618s
user	0m58.113s
sys	0m1.167s






QUESTION 3: Does adding more threads continue to speed up the program? Do more threads ever slow down the program even slightly?  Why or why not?

	Yes, but only to a certain point. As discussed in class, having more threads will increase the overhead which can lead to speed slowing down due to it consuming more resources than it should.
	
	

QUESTION 4: Does adding more threads increase the "system load" (sys), or is it constant regardless of the number of threads?  Why?

	It depends, if the threads performs a lot of system calls (like opening files) then it could increase with more threads. If the threads are mostly doing just doing computations, then it shouldn't impact the system load too much. In the case of this assignment, puzzle txt files are constantly being opened in threads so yes the system load is increased with then number of threads.




BONUS
=====

QUESTION 5: Time your thread pool version of WordSearch exactly as you did for the full credit version. Post your timings here.

YOUR Timing:







QUESTION 6: Is a thread pool faster, slower, or roughly equivalent in performance? 







QUESTION 7: Compare your full credit and bonus solution code. Which do you believe is more supportable over a long lifetime of evolving hardware and environments?







EXTREME BONUS
=============

QUESTION 8: Post your final timings here. (The "race" on Antares will determine the actual winner - this just lets me know you're competing!)







